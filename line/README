A direct-to-screen line draw and test for MSX by Antti Silvast, 2012.

Compiling:
- Type make at the command line. 

An implementation of the Bresenham line algorithm (http://en.wikipedia.org/wiki/Bresenham's_line_algorithm). All the calculations are done in the Z80 registers. Draws to an offscreen buffer in the video memory hence there is no flicker. 

Speed test:

	FPS	lines
	---	-----
	34	6
	16	15
	12	20
	10	25

Issues and limitations: 

- Due to the calculation of the Bresenham error term in an 8-bit register, the lines can only be around 64 pixels wide/high. Obviously, longer lines will be necessary in many cases. One idea here is to calculate the error term (2*err in the Wikipedia link) into a 16-bit register while everything else (dx and dy, whose absolute values range 0...255) can be kept in 8-bit registers. 

- On an MSX, screen erasing is a major efficiency factor. The line algorithm can draw to the entire screen, but unfortunately, its erasing will cause a lot of flicker. Thus, this version of the line routine uses a hidden offscreen buffer which I implement by switching between two name tables between frames. This also limits the effective buffer to 128x192 (or any other area that is half of 256x192). 

- As only half of the screen is visible, a border needs to be drawn. This border has to be blank. However, all the characters are in use by the routine (either by the on-screen or off-screen buffer respectively). I erase any draws to the border character which is 0 of each three pattern tables in SCREEN 2. Lines that intersect these three areas ((0,0)-(7,7); (0,64)-(7,51); (0,128)-(7,135)) shall be erased for that part! 

- The clipping of the line coordinates is not implemented. Maybe this clipping could use a delta calculation: that is to say, it would increase or decrease the line's x and y coordinates according to the deltas of the line so that the visible part of the line is always drawn.  


